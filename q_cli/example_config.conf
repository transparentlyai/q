# Configuration file for q - AI Command Line Assistant
# This is an example configuration file. Copy it to ~/.config/q.conf and modify as needed.

# Configuration variables (in KEY=value format)
# Environment variables can be used with $VAR or ${VAR} syntax

# API keys and credentials for different providers
ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}  # Direct API key

# VertexAI settings 
# VERTEXAI_API_KEY=/path/to/service-account.json  # Path to service account JSON file
# VERTEXAI_PROJECT=your-google-cloud-project-id  # Required for VertexAI
# VERTEXAI_LOCATION=us-central1  # Required for VertexAI (region where API is deployed)
# Note: All three settings above are required for VertexAI to work properly

# Other provider API keys
# GROQ_API_KEY=${GROQ_API_KEY}  # Direct API key
# OPENAI_API_KEY=${OPENAI_API_KEY}  # Direct API key

# Provider and model settings
PROVIDER=anthropic  # Choose from: anthropic, vertexai, groq, openai

# Model selection (uncomment the one you want to use)
MODEL=claude-3-7-sonnet-latest  # For Anthropic
# MODEL=gemini-2.0-flash-001    # For VertexAI
# MODEL=deepseek-r1-distill-llama-70b  # For Groq
# MODEL=gpt-4o-mini  # For OpenAI

# Maximum tokens in response 
# Global setting for all providers (default: 8192)
MAX_TOKENS=8192

# Provider-specific token limits (optional)
# ANTHROPIC_MAX_TOKENS=8192
# VERTEXAI_MAX_TOKENS=8192
# GROQ_MAX_TOKENS=8192
# OPENAI_MAX_TOKENS=8192

# Provider-specific context token limits (optional)
# ANTHROPIC_MAX_CONTEXT_TOKENS=200000
# VERTEXAI_MAX_CONTEXT_TOKENS=1000000
# GROQ_MAX_CONTEXT_TOKENS=200000
# OPENAI_MAX_CONTEXT_TOKENS=200000

# Rate limits per provider (tokens per minute)
ANTHROPIC_MAX_TOKENS_PER_MIN=80000
# VERTEXAI_MAX_TOKENS_PER_MIN=80000
# GROQ_MAX_TOKENS_PER_MIN=80000
# OPENAI_MAX_TOKENS_PER_MIN=80000

# Command permission settings
# Command lists must be specified in JSON array format
# IMPORTANT: JSON arrays must be on a single line
# Note: These are ADDED to the default values, not replacements

# Commands in this list will be executed without asking for permission
# Add commands you frequently use and trust here
ALWAYS_APPROVED_COMMANDS=[]

# Commands in this list will always require explicit permission before execution
# Add potentially dangerous commands here that you still want to be able to run
ALWAYS_RESTRICTED_COMMANDS=[]

# Commands in this list will never be allowed to execute
# Add commands that are too dangerous to run in your environment
PROHIBITED_COMMANDS=[]

# Optional context section - everything after #CONTEXT is sent with every query
# Environment variables are also expanded in the context section
#CONTEXT
- My name is User
- The environment is Linux
- Be brief unless asked otherwise
- My home directory is $HOME